#!/usr/bin/env python
from __future__ import print_function
import roslib
roslib.load_manifest("kinect")
import rospy
from std_msgs.msg import String
from sensor_msgs.msg import Image
import sys
import cv2
import numpy as np
from cv_bridge import CvBridge, CvBridgeError
from collections import deque


def process_image(img):

	greenLower = np.array([0,0,0])
	greenUpper = np.array([0,0,255])

	pts = deque(maxlen=args["buffer"])
	counter = 0
	(dX, dY) = (0, 0)
	direction = ""

	blurred = cv2.GaussianBlur(img, (11, 11), 0)
	hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

	mask = cv2.inRange(hsv, greenLower, greenUpper)
	mask = cv2.erode(mask, None, iterations=2)
	mask = cv2.dilate(mask, None, iterations=2)

	cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]
	center = None

	if len(cnts) > 0:
		c = max(cnts, key=cv2.contourArea)
		((x, y), radius) = cv2.minEnclosingCircle(c)
		M = cv2.moments(c)
		center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
		if radius > 10:
			cv2.circle(frame, (int(x), int(y)), int(radius),
				(0, 255, 255), 2)
			cv2.circle(frame, center, 5, (0, 0, 255), -1)
			pts.appendleft(center)

	for i in np.arange(1, len(pts)):

		if pts[i - 1] is None or pts[i] is None:
			continue

		if counter >= 10 and i == 1 and pts[-10] is not None:
			dX = pts[-10][0] - pts[i][0]
			dY = pts[-10][1] - pts[i][1]
			(dirX, dirY) = ("", "")

			if np.abs(dX) > 20:
				dirX = "East" if np.sign(dX) == 1 else "West"

			if np.abs(dY) > 20:
				dirY = "North" if np.sign(dY) == 1 else "South"

			if dirX != "" and dirY != "":
				direction = "{}-{}".format(dirY, dirX)

			else:
				direction = dirX if dirX != "" else dirY

		thickness = int(np.sqrt(args["buffer"] / float(i + 1)) * 2.5)
		cv2.line(img, pts[i - 1], pts[i], (0, 0, 255), thickness)

    	cv2.putText(img, direction, (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
    		0.65, (0, 0, 255), 3)
    	cv2.putText(img, "dx: {}, dy: {}".format(dX, dY),
    		(10, img.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX,
    		0.35, (0, 0, 255), 1)

    	cv2.imshow("Frame", img)
    	key = cv2.waitKey(1) & 0xFF
    	counter += 1
	


class ImageConverter(object):

	def __init__(self):
		self.image_pub = rospy.Publisher("coord_pub", String)
		self.bridge = CvBridge()
		self.image_sub = rospy.Subscriber("/camera/depth/image", Image, self.callback)


	def callback(self, data):
		try:
			# Depth
			depth_image = self.bridge.imgmsg_to_cv(data, "32FC1")
		except CvBridgeError as e:
			print(e)

		(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(np.asarray(depth_image))
		print("Loc : %s Val: %s" % (str(minLoc), str(minVal))) 
		
		try:
			l = list(minLoc)
			minloc_str = str(minloc_list[0]) + " " + str(minloc_list[1])
			print(str(minloc_str))
			self.image_pub.publish(minloc_str)
		except:
			print("Cannot publish")
	

def main():

	imconv = ImageConverter()
	rospy.init_node("ImageConverter", anonymous=True)
	try:
		rospy.spin()
	except KeyboardInterrupt:
		print("Shutting down")
	cv2.destroyAllWindows()

if __name__ == "__main__":
	main()
